<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">


  <!--
     convert a bunch of properties to String beans, that can be injected with @Named
     This avoids having spring dependency for @Value.

     And this file is just an XML, which can be picked up by spring. But if you for example use guice, it can just be ignored.
   -->

  <bean class="java.lang.String" id="npo-api.baseUrl">
    <constructor-arg value="${npo-api.baseUrl}" />
  </bean>

  <bean class="java.lang.String" id="npo-api.apiKey">
    <constructor-arg value="${npo-api.apiKey}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.secret">
    <constructor-arg value="${npo-api.secret}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.origin">
    <constructor-arg value="${npo-api.origin}"/>
  </bean>

  <bean  class="java.lang.String" id="npo-api.connectionRequestTimeout">
    <constructor-arg value="${npo-api.connectionRequestTimeout:1s}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.connectTimeout">
    <constructor-arg value="${npo-api.connectTimeout:1s}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.warnThreshold">
    <constructor-arg value="${npo-api.warnThreshold:1s}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.countWindow">
    <constructor-arg value="${npo-api.countWindow:10m}"/>
  </bean>

  <bean class="java.lang.Integer" id="npo-api.bucketCount">
    <constructor-arg value="${npo-api.bucketCount:10}"/>
  </bean>

  <bean class="java.lang.String" id="npo-api.socketTimeout">
    <constructor-arg value="${npo-api.socketTimeout:1s}"/>
  </bean>

  <bean class="java.lang.Double" id="npo-api.baserate" factory-method="valueOf">
    <constructor-arg value="${npo-api.baserate:1000}"/>
  </bean>

   <bean class="java.lang.Double" id="npo-api.minrate" factory-method="valueOf">
    <constructor-arg value="${npo-api.minrate:0.1}"/>
  </bean>

  <bean class="java.lang.String" id="npo-pages_publisher.baseUrl">
    <constructor-arg value="${npo-pages_publisher.baseUrl}"/>
  </bean>
  <bean class="java.lang.String" id="npo-pages_publisher.user">
    <constructor-arg value="${npo-pages_publisher.user}"/>
  </bean>
  <bean class="java.lang.String" id="npo-pages_publisher.password">
    <constructor-arg value="${npo-pages_publisher.password}"/>
  </bean>
  <bean class="java.lang.String" id="npo-pages_publisher.jwsIssuer">
    <constructor-arg value="${npo-pages_publisher.jwsIssuer}"/>
  </bean>
  <bean class="java.lang.String" id="npo-pages_publisher.jwsKey">
    <constructor-arg value="${npo-pages_publisher.jwsKey}"/>
  </bean>
  <bean class="java.lang.String" id="npo-pages_publisher.jwsUser">
    <constructor-arg value="${npo-pages_publisher.jwsUser}"/>
  </bean>


  <bean class="java.lang.Double" id="npo-pages_publisher.baserate" factory-method="valueOf">
    <constructor-arg value="${npo-pages_publisher.baserate:1000}"/>
  </bean>

   <bean class="java.lang.Double" id="npo-pages_publisher.minrate" factory-method="valueOf">
    <constructor-arg value="${npo-pages_publisher.minrate:0.1}"/>
  </bean>


  <bean class="java.lang.String" id="npo-images.baseUrl">
    <constructor-arg value="${npo-images.baseUrl}"/>
  </bean>


  <bean class="org.apache.commons.lang3.math.NumberUtils" factory-method="createInteger" id="npo-api.maxConnections">
    <constructor-arg value="${npo-api.maxConnections}"/>
  </bean>

  <bean  class="org.apache.commons.lang3.math.NumberUtils" factory-method="createInteger" id="npo-api.maxConnectionsPerRoute">
    <constructor-arg value="${npo-api.maxConnectionsPerRoute}"/>
  </bean>

  <bean class="java.lang.Boolean" factory-method="valueOf" id="npo-api.trustAll">
    <constructor-arg value="${npo-api.trustAll}"/>
  </bean>



  <bean  id="api.clients.provider" class="nl.vpro.api.client.frontend.NpoApiClients.Provider"  />
  <bean class="nl.vpro.api.client.frontend.NpoApiClients" factory-bean="api.clients.provider" factory-method="get" />

</beans>
